// This file is auto-generated by @hey-api/openapi-ts

export type Bundesland = 'Burgenland' | 'Kärnten' | 'Niederösterreich' | 'Oberösterreich' | 'Salzburg' | 'Steiermark' | 'Tirol' | 'Vorarlberg' | 'Wien';

export type Dataset = {
    type: EndpointType;
    mode: EndpointMode;
    response_formats: Array<OutputFormat>;
    url: string;
};

export type EndpointMode = 'historical' | 'current' | 'forecast';

export type EndpointType = 'grid' | 'timeseries' | 'station';

export type FrequencyStep = {
    from_index: number;
    to_index: number;
    frequency: string;
    step_offset: string;
};

export type GeoJsonFeature = {
    type?: 'Feature';
    geometry: GeoJsonPoint;
    properties: GeoJsonFeatureProperties;
};

export type GeoJsonFeatureParameter = {
    name: string;
    unit: string;
    data: Array<number | null>;
};

export type GeoJsonFeatureProperties = {
    parameters: {
        [key: string]: GeoJsonFeatureParameter;
    };
};

export type GeoJsonPoint = {
    type?: 'Point';
    /**
     * Point coordinates are in x, y order (easting, northing for projected coordinates, longitude, and latitude for geographic coordinates)
     */
    coordinates: [
        number,
        number
    ];
};

export type GridForecastGeoJsonSerializer = {
    reference_time: unknown;
    media_type?: 'application/json';
    type?: 'FeatureCollection';
    version: string;
    /**
     * Format: *YYYY-MM-DDThh:mm:ss±hh:mm*
     */
    timestamps: Array<unknown>;
    features: Array<GeoJsonFeature>;
    filename?: string | null;
    bbox: [
        number,
        number,
        number,
        number
    ];
};

export type GridForecastMetadataModel = {
    title: string;
    parameters: Array<ParameterMetadataModel>;
    frequency: Array<FrequencyStep> | string;
    type: string;
    mode: string;
    response_formats: Array<string>;
    last_forecast_reftime?: unknown | null;
    max_forecast_offset?: number | null;
    available_forecast_reftimes: Array<unknown>;
    forecast_length?: number | null;
    bbox: [
        number,
        number,
        number,
        number
    ];
    bbox_outer: [
        number,
        number,
        number,
        number
    ];
    spatial_resolution_m: number;
    crs: string;
    grid_bounds: [
        number,
        number,
        number,
        number
    ];
};

export type GridGeoJsonSerializer = {
    media_type?: 'application/json';
    type?: 'FeatureCollection';
    version: string;
    /**
     * Format: *YYYY-MM-DDThh:mm:ss±hh:mm*
     */
    timestamps: Array<unknown>;
    features: Array<GeoJsonFeature>;
    filename?: string | null;
    bbox: [
        number,
        number,
        number,
        number
    ];
};

export type GridHistoricalMetadataModel = {
    title: string;
    parameters: Array<ParameterMetadataModel>;
    frequency: Array<FrequencyStep> | string;
    type: string;
    mode: string;
    response_formats: Array<string>;
    start_time: unknown;
    end_time: unknown;
    bbox: [
        number,
        number,
        number,
        number
    ];
    bbox_outer: [
        number,
        number,
        number,
        number
    ];
    spatial_resolution_m: number;
    crs: string;
    grid_bounds: [
        number,
        number,
        number,
        number
    ];
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type IdType = 'Synop' | 'Klima';

export type MdType = 'stations' | 'parameters';

export type OutputFormat = 'geojson' | 'netcdf' | 'csv';

export type ParameterMetadataModel = {
    name: string;
    long_name: string;
    desc: string;
    unit: string;
};

export type StationCurrentMetadataModel = {
    title: string;
    parameters: Array<ParameterMetadataModel>;
    frequency: Array<FrequencyStep> | string;
    type: string;
    mode: string;
    response_formats: Array<string>;
    time: unknown;
    stations: Array<StationMetadata>;
    id_type: IdType;
};

export type StationFilterEndpointMode = 'historical' | 'current';

export type StationFilterResponseDto = {
    num_stations_total: number;
    num_stations_matching: number;
    matching_stations: Array<StationMetadataDto>;
};

export type StationGeoJsonFeature = {
    type?: 'Feature';
    geometry: GeoJsonPoint;
    properties: StationGeoJsonProperties;
};

export type StationGeoJsonProperties = {
    parameters: {
        [key: string]: GeoJsonFeatureParameter;
    };
    station: string;
};

export type StationGeoJsonSerializer = {
    media_type?: 'application/json';
    type?: 'FeatureCollection';
    version: string;
    /**
     * Format: *YYYY-MM-DDThh:mm:ss±hh:mm*
     */
    timestamps: Array<unknown>;
    features: Array<StationGeoJsonFeature>;
    filename?: string | null;
};

export type StationHistoricalMetadataModel = {
    title: string;
    parameters: Array<ParameterMetadataModel>;
    frequency: Array<FrequencyStep> | string;
    type: string;
    mode: string;
    response_formats: Array<string>;
    start_time: unknown;
    end_time: unknown;
    stations: Array<StationMetadata>;
    id_type: IdType;
};

export type StationMetadata = {
    type: StationMetadataType;
    id: string;
    group_id?: string | null;
    name: string;
    state?: Bundesland | null;
    lat: number;
    lon: number;
    altitude?: number | null;
    valid_from: unknown;
    valid_to: unknown;
    has_sunshine?: boolean | null;
    has_global_radiation?: boolean | null;
    is_active?: boolean | null;
};

export type StationMetadataDto = {
    type: StationMetadataType;
    id: string;
    name: string;
    state?: Bundesland | null;
    lat: number;
    lon: number;
    altitude?: number | null;
    valid_from: string;
    valid_to: string;
    has_sunshine?: boolean | null;
    has_global_radiation?: boolean | null;
    is_active?: boolean | null;
    /**
     * List of sub-stations of this station. Only populated if type == COMBINED.
     */
    sub_stations?: Array<StationMetadataDto>;
    matches?: boolean;
};

export type StationMetadataType = 'COMBINED' | 'SUB_STATION' | 'INDIVIDUAL';

export type TimeseriesForecastGeoJsonSerializer = {
    reference_time: unknown;
    media_type?: 'application/json';
    type?: 'FeatureCollection';
    version: string;
    /**
     * Format: *YYYY-MM-DDThh:mm:ss±hh:mm*
     */
    timestamps: Array<unknown>;
    features: Array<GeoJsonFeature>;
    filename?: string | null;
};

export type TimeseriesGeoJsonSerializer = {
    media_type?: 'application/json';
    type?: 'FeatureCollection';
    version: string;
    /**
     * Format: *YYYY-MM-DDThh:mm:ss±hh:mm*
     */
    timestamps: Array<unknown>;
    features: Array<GeoJsonFeature>;
    filename?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ViewAndFilterAllAvailableDatasetsDatasetsGetData = {
    body?: never;
    path?: never;
    query?: {
        type?: EndpointType | null;
        mode?: EndpointMode | null;
    };
    url: '/datasets';
};

export type ViewAndFilterAllAvailableDatasetsDatasetsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ViewAndFilterAllAvailableDatasetsDatasetsGetError = ViewAndFilterAllAvailableDatasetsDatasetsGetErrors[keyof ViewAndFilterAllAvailableDatasetsDatasetsGetErrors];

export type ViewAndFilterAllAvailableDatasetsDatasetsGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: Dataset;
    };
};

export type ViewAndFilterAllAvailableDatasetsDatasetsGetResponse = ViewAndFilterAllAvailableDatasetsDatasetsGetResponses[keyof ViewAndFilterAllAvailableDatasetsDatasetsGetResponses];

export type HistoricalGridMetadataGridHistoricalResourceIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: never;
    url: '/grid/historical/{resource_id}/metadata';
};

export type HistoricalGridMetadataGridHistoricalResourceIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalGridMetadataGridHistoricalResourceIdMetadataGetError = HistoricalGridMetadataGridHistoricalResourceIdMetadataGetErrors[keyof HistoricalGridMetadataGridHistoricalResourceIdMetadataGetErrors];

export type HistoricalGridMetadataGridHistoricalResourceIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: GridHistoricalMetadataModel;
};

export type HistoricalGridMetadataGridHistoricalResourceIdMetadataGetResponse = HistoricalGridMetadataGridHistoricalResourceIdMetadataGetResponses[keyof HistoricalGridMetadataGridHistoricalResourceIdMetadataGetResponses];

export type HistoricalGridParameterMetadataCsvGridHistoricalResourceIdMetadataParametersGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: {
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/grid/historical/{resource_id}/metadata/parameters';
};

export type HistoricalGridParameterMetadataCsvGridHistoricalResourceIdMetadataParametersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalGridParameterMetadataCsvGridHistoricalResourceIdMetadataParametersGetError = HistoricalGridParameterMetadataCsvGridHistoricalResourceIdMetadataParametersGetErrors[keyof HistoricalGridParameterMetadataCsvGridHistoricalResourceIdMetadataParametersGetErrors];

export type HistoricalGridParameterMetadataCsvGridHistoricalResourceIdMetadataParametersGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HistoricalGridDataGridHistoricalResourceIdGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query: {
        /**
         * At least one parameter has to be specified.
         */
        parameters: Array<string>;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        start: string;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        end: string;
        /**
         * Supply in format *south,west,north,east*
         */
        bbox: string;
        output_format?: OutputFormat;
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/grid/historical/{resource_id}';
};

export type HistoricalGridDataGridHistoricalResourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalGridDataGridHistoricalResourceIdGetError = HistoricalGridDataGridHistoricalResourceIdGetErrors[keyof HistoricalGridDataGridHistoricalResourceIdGetErrors];

export type HistoricalGridDataGridHistoricalResourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: GridGeoJsonSerializer;
};

export type HistoricalGridDataGridHistoricalResourceIdGetResponse = HistoricalGridDataGridHistoricalResourceIdGetResponses[keyof HistoricalGridDataGridHistoricalResourceIdGetResponses];

export type GridForecastMetadataGridForecastResourceIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: never;
    url: '/grid/forecast/{resource_id}/metadata';
};

export type GridForecastMetadataGridForecastResourceIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GridForecastMetadataGridForecastResourceIdMetadataGetError = GridForecastMetadataGridForecastResourceIdMetadataGetErrors[keyof GridForecastMetadataGridForecastResourceIdMetadataGetErrors];

export type GridForecastMetadataGridForecastResourceIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: GridForecastMetadataModel;
};

export type GridForecastMetadataGridForecastResourceIdMetadataGetResponse = GridForecastMetadataGridForecastResourceIdMetadataGetResponses[keyof GridForecastMetadataGridForecastResourceIdMetadataGetResponses];

export type GridForecastDataGridForecastResourceIdGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query: {
        /**
         * At least one parameter has to be specified.
         */
        parameters: Array<string>;
        /**
         * Supply in format *south,west,north,east*
         */
        bbox: string;
        /**
         * This parameter allows to access historical forecasts. If this parameter is not set the most recently created forecast is returned. If an integer value is given an older forecast is returned, where value is the 'age' of the forecast. 0 is the most recent forecast, 1 is the second to last forecast, and so on.
         */
        forecast_offset?: number;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        start?: string;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        end?: string;
        output_format?: OutputFormat;
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/grid/forecast/{resource_id}';
};

export type GridForecastDataGridForecastResourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GridForecastDataGridForecastResourceIdGetError = GridForecastDataGridForecastResourceIdGetErrors[keyof GridForecastDataGridForecastResourceIdGetErrors];

export type GridForecastDataGridForecastResourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: GridForecastGeoJsonSerializer;
};

export type GridForecastDataGridForecastResourceIdGetResponse = GridForecastDataGridForecastResourceIdGetResponses[keyof GridForecastDataGridForecastResourceIdGetResponses];

export type HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: never;
    url: '/timeseries/historical/{resource_id}/metadata';
};

export type HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetError = HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetErrors[keyof HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetErrors];

export type HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: GridHistoricalMetadataModel;
};

export type HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetResponse = HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetResponses[keyof HistoricalTimeseriesMetadataTimeseriesHistoricalResourceIdMetadataGetResponses];

export type HistoricalTimeseriesTimeseriesHistoricalResourceIdGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query: {
        /**
         * At least one parameter has to be specified.
         */
        parameters: Array<string>;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        start: string;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        end: string;
        /**
         * Strings of 'LAT,LON'.
         */
        lat_lon: Array<string>;
        output_format?: OutputFormat;
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/timeseries/historical/{resource_id}';
};

export type HistoricalTimeseriesTimeseriesHistoricalResourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalTimeseriesTimeseriesHistoricalResourceIdGetError = HistoricalTimeseriesTimeseriesHistoricalResourceIdGetErrors[keyof HistoricalTimeseriesTimeseriesHistoricalResourceIdGetErrors];

export type HistoricalTimeseriesTimeseriesHistoricalResourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: TimeseriesGeoJsonSerializer;
};

export type HistoricalTimeseriesTimeseriesHistoricalResourceIdGetResponse = HistoricalTimeseriesTimeseriesHistoricalResourceIdGetResponses[keyof HistoricalTimeseriesTimeseriesHistoricalResourceIdGetResponses];

export type TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: never;
    url: '/timeseries/forecast/{resource_id}/metadata';
};

export type TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetError = TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetErrors[keyof TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetErrors];

export type TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: GridForecastMetadataModel;
};

export type TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetResponse = TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetResponses[keyof TimeseriesForecastMetadataTimeseriesForecastResourceIdMetadataGetResponses];

export type TimeseriesForecastTimeseriesForecastResourceIdGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query: {
        /**
         * At least one parameter has to be specified.
         */
        parameters: Array<string>;
        /**
         * Strings of 'LAT,LON'.
         */
        lat_lon: Array<string>;
        /**
         * This parameter allows to access historical forecasts. If this parameter is not set the most recently created forecast is returned. If an integer value is given an older forecast is returned, where value is the 'age' of the forecast. 0 is the most recent forecast, 1 is the second to last forecast, and so on.
         */
        forecast_offset?: number;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        start?: string;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        end?: string;
        output_format?: OutputFormat;
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/timeseries/forecast/{resource_id}';
};

export type TimeseriesForecastTimeseriesForecastResourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimeseriesForecastTimeseriesForecastResourceIdGetError = TimeseriesForecastTimeseriesForecastResourceIdGetErrors[keyof TimeseriesForecastTimeseriesForecastResourceIdGetErrors];

export type TimeseriesForecastTimeseriesForecastResourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: TimeseriesForecastGeoJsonSerializer;
};

export type TimeseriesForecastTimeseriesForecastResourceIdGetResponse = TimeseriesForecastTimeseriesForecastResourceIdGetResponses[keyof TimeseriesForecastTimeseriesForecastResourceIdGetResponses];

export type FilterStationsStationModeResourceIdFilterGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
        mode: StationFilterEndpointMode;
    };
    query?: {
        /**
         * Restricts output to stations that have one of the given ids.
         */
        id?: Array<string>;
        /**
         * Restricts output to stations whose name contains one of the given strings.
         */
        name?: Array<string>;
        /**
         * Restricts output to stations who are located in one of the given states
         */
        state?: Array<Bundesland>;
        /**
         * Supply in format: *YYYY-MM-DD* or *YYYY-MM-DDTHH:mm*
         */
        start_date?: string;
        /**
         * Supply in format: *YYYY-MM-DD* or *YYYY-MM-DDTHH:mm*
         */
        end_date?: string;
        /**
         * Physical unit is *m*
         */
        min_altitude?: number;
        /**
         * Physical unit is *m*
         */
        max_altitude?: number | null;
        has_sunshine?: boolean;
        has_global_radiation?: boolean;
        is_active?: boolean;
    };
    url: '/station/{mode}/{resource_id}/filter';
};

export type FilterStationsStationModeResourceIdFilterGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type FilterStationsStationModeResourceIdFilterGetError = FilterStationsStationModeResourceIdFilterGetErrors[keyof FilterStationsStationModeResourceIdFilterGetErrors];

export type FilterStationsStationModeResourceIdFilterGetResponses = {
    /**
     * Successful Response
     */
    200: StationFilterResponseDto;
};

export type FilterStationsStationModeResourceIdFilterGetResponse = FilterStationsStationModeResourceIdFilterGetResponses[keyof FilterStationsStationModeResourceIdFilterGetResponses];

export type HistoricalStationMetadataStationHistoricalResourceIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: never;
    url: '/station/historical/{resource_id}/metadata';
};

export type HistoricalStationMetadataStationHistoricalResourceIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalStationMetadataStationHistoricalResourceIdMetadataGetError = HistoricalStationMetadataStationHistoricalResourceIdMetadataGetErrors[keyof HistoricalStationMetadataStationHistoricalResourceIdMetadataGetErrors];

export type HistoricalStationMetadataStationHistoricalResourceIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: StationHistoricalMetadataModel;
};

export type HistoricalStationMetadataStationHistoricalResourceIdMetadataGetResponse = HistoricalStationMetadataStationHistoricalResourceIdMetadataGetResponses[keyof HistoricalStationMetadataStationHistoricalResourceIdMetadataGetResponses];

export type HistoricalStationMetadataCsvStationHistoricalResourceIdMetadataMdtypeGetData = {
    body?: never;
    path: {
        mdtype: MdType;
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: {
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/station/historical/{resource_id}/metadata/{mdtype}';
};

export type HistoricalStationMetadataCsvStationHistoricalResourceIdMetadataMdtypeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalStationMetadataCsvStationHistoricalResourceIdMetadataMdtypeGetError = HistoricalStationMetadataCsvStationHistoricalResourceIdMetadataMdtypeGetErrors[keyof HistoricalStationMetadataCsvStationHistoricalResourceIdMetadataMdtypeGetErrors];

export type HistoricalStationMetadataCsvStationHistoricalResourceIdMetadataMdtypeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HistoricalStationDataStationHistoricalResourceIdGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query: {
        /**
         * At least one parameter has to be specified.
         */
        parameters: Array<string>;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        start: string;
        /**
         * Supply in format: *YYYY-MM-DDThh:mm*. Time is optional.
         */
        end: string;
        /**
         * At least one station id has to be specified.
         */
        station_ids: Array<string>;
        output_format?: OutputFormat;
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/station/historical/{resource_id}';
};

export type HistoricalStationDataStationHistoricalResourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HistoricalStationDataStationHistoricalResourceIdGetError = HistoricalStationDataStationHistoricalResourceIdGetErrors[keyof HistoricalStationDataStationHistoricalResourceIdGetErrors];

export type HistoricalStationDataStationHistoricalResourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: StationGeoJsonSerializer;
};

export type HistoricalStationDataStationHistoricalResourceIdGetResponse = HistoricalStationDataStationHistoricalResourceIdGetResponses[keyof HistoricalStationDataStationHistoricalResourceIdGetResponses];

export type CurrentStationMetadataStationCurrentResourceIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query?: never;
    url: '/station/current/{resource_id}/metadata';
};

export type CurrentStationMetadataStationCurrentResourceIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CurrentStationMetadataStationCurrentResourceIdMetadataGetError = CurrentStationMetadataStationCurrentResourceIdMetadataGetErrors[keyof CurrentStationMetadataStationCurrentResourceIdMetadataGetErrors];

export type CurrentStationMetadataStationCurrentResourceIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: StationCurrentMetadataModel;
};

export type CurrentStationMetadataStationCurrentResourceIdMetadataGetResponse = CurrentStationMetadataStationCurrentResourceIdMetadataGetResponses[keyof CurrentStationMetadataStationCurrentResourceIdMetadataGetResponses];

export type CurrentStationDataStationCurrentResourceIdGetData = {
    body?: never;
    path: {
        /**
         * ID of dataset
         */
        resource_id: string;
    };
    query: {
        /**
         * At least one parameter has to be specified.
         */
        parameters: Array<string>;
        /**
         * At least one station id has to be specified.
         */
        station_ids: Array<string>;
        output_format?: OutputFormat;
        /**
         * Filename without file extension
         */
        filename?: string | null;
    };
    url: '/station/current/{resource_id}';
};

export type CurrentStationDataStationCurrentResourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CurrentStationDataStationCurrentResourceIdGetError = CurrentStationDataStationCurrentResourceIdGetErrors[keyof CurrentStationDataStationCurrentResourceIdGetErrors];

export type CurrentStationDataStationCurrentResourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: StationGeoJsonSerializer;
};

export type CurrentStationDataStationCurrentResourceIdGetResponse = CurrentStationDataStationCurrentResourceIdGetResponses[keyof CurrentStationDataStationCurrentResourceIdGetResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/v1` | (string & {});
};